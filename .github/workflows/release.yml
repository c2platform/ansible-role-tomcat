---
name: Release and deploy to Galaxy
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:

jobs:
  releaseanddeploy:
    runs-on: ubuntu-latest
    # if: github.repository == 'ansible-collection-core'
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get current version
        id: cversion
        run: echo "::set-output name=version::$(grep -m 1 '## ' CHANGELOG.md | awk -F'## ' '{ print $2 }' | awk -F' ' '{ print $1 }')"
      - name: Get changes
        id: vchanges
        run: echo "::set-output name=vchanges::$(csplit --digits=2  --quiet --prefix=CHANGELOG-parts CHANGELOG.md "/##/+1" "{*}" && head -n -1 CHANGELOG-parts01)"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies  # not used
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.cversion.outputs.version }}
          release_name: Release ${{ steps.cversion.outputs.version }}
          body: ${{ steps.vchanges.outputs.vchanges }}
          draft: false
          prerelease: true  # TODO
      - name: Trigger a new import on Galaxy.
        run: >-
          ansible-galaxy role import --api-key ${{ secrets.GALAXY_API_KEY }}
          $(echo ${{ github.repository }} | cut -d/ -f1) $(echo ${{ github.repository }} | cut -d/ -f2)
